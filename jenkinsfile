pipeline {
    agent any 
    tools { 
        maven 'maven' 
         
    }

        stages {
            stage('git pull') {
                steps {
                    git url: 'https://github.com/piya199616/demo-counter-app.git' , branch: 'main'
                }
            }
            stage('unittest'){
                steps{
                    sh 'mvn test'
                }
            }
            stage('IntegrationTesting'){
                steps{
                    sh 'mvn verify -DskiUnitTests'
                }
            }
            stage('mavenbuild'){
                steps{
                    sh 'mvn clean install'
                }
            }
            stage('static code analysis'){
                steps{
                    script{
                        withSonarQubeEnv(credentialsID: 'sonar-api'){
                                sh 'mvn clean package sonar:sonar'
                        }
                   
                    }
                    
                }
            }
            stage('Quality Gate'){
                steps{
                    script{
                        waitForQualityGate abortPipeline: false, credentialsID: 'sonar-api'
                    }
                }
            }
            stage('Upload war file to Nexus'){
                steps{
                    script{
                        def readPomVersion = readMavenPom file: 'pom.xml'

                        def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ? "demoapp-snapshot" : "demoapp-release"
                        nexusArtifactUploader artifacts: 
                        [
                            [
                        artifactId: 'springboot', 
                        classifier: '', 
                        file: 'target/Uber.jar', 
                        type: 'jar'
                           ]
                        ], 
                        credentialsId: 'nexus-auth', 
                        groupId: 'com.example', 
                        nexusUrl: '54.144.71.253:8081', 
                        nexusVersion: 'nexus3', 
                        protocol: 'http', 
                        repository: nexusRepo, 
                        version: "${readPomVersion.version}"
                    }
                }
            }
            stage('Docker Build Image'){
                steps{
                    script{
                    sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID pburela/$JOB_NAME:v1.$BUILD_ID'
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID pburela/$JOB_NAME:latest'
                }

                    }
                    
            }
            stage('Push Image to Docker Hub'){
                  steps{
                    script{
                     withCredentials([string(credentialsId: 'dockerhub_passwd', variable: 'dockerhub_passwd')]) 
                    {
                     sh 'docker login -u pburela -p ${dockerhub_passwd}'
                     sh  'docker image push pburela/$JOB_NAME:v1.$BUILD_ID'
                   }
                }
            }

            }
              
        
    }
}